version: 2.1
workflows:
  build-and-deploy:
    jobs:
      - build-docker
      - deploy-to-aws:
          requires:
            - build-docker
          filters:
            branches:
              only:
                - dev-test-circle-ci
jobs:
  build-docker:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Check Dockerfile
          command: cat Dockerfile
      - run:
          name: Install Docker Compose
          command: |
            sudo apt-get update
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Build and push Docker image
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker build \
              -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest .
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
  deploy-to-aws:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${SSH_FINGERPRINT}"
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y rsync
            sudo apt-get install -y python3-pip
            sudo pip3 install awscli
      - run:
          name: Deploy to AWS EC2
          command: |
            rsync -av -e "ssh -o StrictHostKeyChecking=no" --delete --exclude '.*' ./ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH
            ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH \
              && echo "$DOCKER_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin \
              && docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest \
              && (docker stop $DOCKER_CONTAINER_NAME && docker rm $DOCKER_CONTAINER_NAME) 2>/dev/null || true  \
              && docker run -d \
                  --name $DOCKER_CONTAINER_NAME \
                  -p 8081:8081 \
                  $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
            